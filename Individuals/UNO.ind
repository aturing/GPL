S ::= CARDGAME
CARDGAME ::= GAME $ lambda $ WIN
//2 stages
GAME ::= STAGE : STAGE
//Stage 1, 2 rules
STAGE ::= RULES
RULES ::= RULE ; RULE
//Rule 1.1
RULE ::= COMMANDRULE
COMMANDRULE ::= com _ lambda _ COMMAND
COMMAND ::= deal , PLAYERS , AMOUNT
PLAYERS ::= allplayers
AMOUNT ::= 7
//Rule 1.2
RULE ::= COMMANDRULE
COMMANDRULE ::= com _ lambda _ COMMAND
COMMAND ::= deal , TABLE , AMOUNT
TABLE ::= T0
AMOUNT ::= 7
//Stage 2, 4 rules
STAGE ::= RULES
//Rules 1 & 2
RULES ::= RULE ; RULE ; RULES
//Rule 2.1
RULE ::= DIRECTRULE
DIRECTRULE ::= DIRECTANTECEDENT _ DIRECTCONSEQUENT
DIRECTANTECEDENT ::= show , ALLRESTRICTIONS , TABLE
ALLRESTRICTIONS ::= EXTRARESTRICTION
EXTRARESTRICTION ::= samesuit
TABLE ::= T0
DIRECTCONSEQUENT ::= playit
//Rule 2.2
RULE ::= DIRECTRULE
DIRECTRULE ::= DIRECTANTECEDENT _ DIRECTCONSEQUENT
DIRECTANTECEDENT ::= show , ALLRESTRICTIONS , TABLE
ALLRESTRICTIONS ::= EXTRARESTRICTION
EXTRARESTRICTION ::= samenumber
TABLE ::= T0
DIRECTCONSEQUENT ::= playit
//Rules 3 & 4
RULES ::= RULE ; RULE
//Rule 2.3
RULE ::= STANDARDRULE
STANDARDRULE ::= ANTECEDENT _ CONSEQUENT
ANTECEDENT ::= have , lambda
CONSEQUENT ::= next
//Rule 2.4
RULE ::= STANDARDRULE
STANDARDRULE ::= ANTECEDENT _ CONSEQUENT
ANTECEDENT ::= draw
CONSEQUENT ::= win
//0 RANKS
//WIN
WIN ::= tokens * ZEROAMOUNT ; player playing * ZEROAMOUNT
ZEROAMOUNT ::= 0
ZEROAMOUNT ::= 0
//END